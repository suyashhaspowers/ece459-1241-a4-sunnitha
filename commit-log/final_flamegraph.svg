<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="141"><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="805" width="0.7092%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="789" width="0.7092%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="773" width="0.7092%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="757" width="0.7092%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="741" width="0.7092%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="725" width="0.7092%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="709" width="0.7092%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="693" width="0.7092%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="0.0000%" y="677" width="0.7092%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (38 samples, 26.95%)</title><rect x="0.7092%" y="789" width="26.9504%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="38"/><text x="0.9592%" y="799.50">[unknown]</text></g><g><title>[unknown] (38 samples, 26.95%)</title><rect x="0.7092%" y="773" width="26.9504%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="38"/><text x="0.9592%" y="783.50">[unknown]</text></g><g><title>[unknown] (38 samples, 26.95%)</title><rect x="0.7092%" y="757" width="26.9504%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="38"/><text x="0.9592%" y="767.50">[unknown]</text></g><g><title>[unknown] (38 samples, 26.95%)</title><rect x="0.7092%" y="741" width="26.9504%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="38"/><text x="0.9592%" y="751.50">[unknown]</text></g><g><title>[unknown] (33 samples, 23.40%)</title><rect x="4.2553%" y="725" width="23.4043%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="33"/><text x="4.5053%" y="735.50">[unknown]</text></g><g><title>__GI___ctype_init (6 samples, 4.26%)</title><rect x="34.7518%" y="773" width="4.2553%" height="15" fill="rgb(217,207,13)" fg:x="49" fg:w="6"/><text x="35.0018%" y="783.50">__GI_..</text></g><g><title>__GI___sigsetjmp (5 samples, 3.55%)</title><rect x="39.0071%" y="773" width="3.5461%" height="15" fill="rgb(231,73,38)" fg:x="55" fg:w="5"/><text x="39.2571%" y="783.50">__GI..</text></g><g><title>__GI__setjmp (1 samples, 0.71%)</title><rect x="42.5532%" y="773" width="0.7092%" height="15" fill="rgb(225,20,46)" fg:x="60" fg:w="1"/><text x="42.8032%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.71%)</title><rect x="43.2624%" y="549" width="0.7092%" height="15" fill="rgb(210,31,41)" fg:x="61" fg:w="1"/><text x="43.5124%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.71%)</title><rect x="43.2624%" y="533" width="0.7092%" height="15" fill="rgb(221,200,47)" fg:x="61" fg:w="1"/><text x="43.5124%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.71%)</title><rect x="43.2624%" y="517" width="0.7092%" height="15" fill="rgb(226,26,5)" fg:x="61" fg:w="1"/><text x="43.5124%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.71%)</title><rect x="43.2624%" y="501" width="0.7092%" height="15" fill="rgb(249,33,26)" fg:x="61" fg:w="1"/><text x="43.5124%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.71%)</title><rect x="43.2624%" y="485" width="0.7092%" height="15" fill="rgb(235,183,28)" fg:x="61" fg:w="1"/><text x="43.5124%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.71%)</title><rect x="43.2624%" y="469" width="0.7092%" height="15" fill="rgb(221,5,38)" fg:x="61" fg:w="1"/><text x="43.5124%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.71%)</title><rect x="43.2624%" y="453" width="0.7092%" height="15" fill="rgb(247,18,42)" fg:x="61" fg:w="1"/><text x="43.5124%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.71%)</title><rect x="43.2624%" y="437" width="0.7092%" height="15" fill="rgb(241,131,45)" fg:x="61" fg:w="1"/><text x="43.5124%" y="447.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.71%)</title><rect x="43.2624%" y="421" width="0.7092%" height="15" fill="rgb(249,31,29)" fg:x="61" fg:w="1"/><text x="43.5124%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.71%)</title><rect x="43.2624%" y="405" width="0.7092%" height="15" fill="rgb(225,111,53)" fg:x="61" fg:w="1"/><text x="43.5124%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.71%)</title><rect x="43.2624%" y="389" width="0.7092%" height="15" fill="rgb(238,160,17)" fg:x="61" fg:w="1"/><text x="43.5124%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.71%)</title><rect x="43.2624%" y="373" width="0.7092%" height="15" fill="rgb(214,148,48)" fg:x="61" fg:w="1"/><text x="43.5124%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.71%)</title><rect x="43.2624%" y="357" width="0.7092%" height="15" fill="rgb(232,36,49)" fg:x="61" fg:w="1"/><text x="43.5124%" y="367.50"></text></g><g><title>lab4::idea::IdeaGenerator::get_next_idea_name::{{closure}}::{{closure}} (1 samples, 0.71%)</title><rect x="43.2624%" y="341" width="0.7092%" height="15" fill="rgb(209,103,24)" fg:x="61" fg:w="1"/><text x="43.5124%" y="351.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.71%)</title><rect x="43.2624%" y="325" width="0.7092%" height="15" fill="rgb(229,88,8)" fg:x="61" fg:w="1"/><text x="43.5124%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.71%)</title><rect x="43.2624%" y="309" width="0.7092%" height="15" fill="rgb(213,181,19)" fg:x="61" fg:w="1"/><text x="43.5124%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.71%)</title><rect x="43.2624%" y="293" width="0.7092%" height="15" fill="rgb(254,191,54)" fg:x="61" fg:w="1"/><text x="43.5124%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.71%)</title><rect x="43.2624%" y="277" width="0.7092%" height="15" fill="rgb(241,83,37)" fg:x="61" fg:w="1"/><text x="43.5124%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.71%)</title><rect x="43.2624%" y="261" width="0.7092%" height="15" fill="rgb(233,36,39)" fg:x="61" fg:w="1"/><text x="43.5124%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.71%)</title><rect x="43.2624%" y="245" width="0.7092%" height="15" fill="rgb(226,3,54)" fg:x="61" fg:w="1"/><text x="43.5124%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.71%)</title><rect x="43.2624%" y="229" width="0.7092%" height="15" fill="rgb(245,192,40)" fg:x="61" fg:w="1"/><text x="43.5124%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.71%)</title><rect x="43.2624%" y="213" width="0.7092%" height="15" fill="rgb(238,167,29)" fg:x="61" fg:w="1"/><text x="43.5124%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.71%)</title><rect x="43.2624%" y="197" width="0.7092%" height="15" fill="rgb(232,182,51)" fg:x="61" fg:w="1"/><text x="43.5124%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.71%)</title><rect x="43.2624%" y="181" width="0.7092%" height="15" fill="rgb(231,60,39)" fg:x="61" fg:w="1"/><text x="43.5124%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.71%)</title><rect x="43.2624%" y="165" width="0.7092%" height="15" fill="rgb(208,69,12)" fg:x="61" fg:w="1"/><text x="43.5124%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.71%)</title><rect x="43.2624%" y="149" width="0.7092%" height="15" fill="rgb(235,93,37)" fg:x="61" fg:w="1"/><text x="43.5124%" y="159.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.71%)</title><rect x="43.2624%" y="133" width="0.7092%" height="15" fill="rgb(213,116,39)" fg:x="61" fg:w="1"/><text x="43.5124%" y="143.50"></text></g><g><title>_int_malloc (1 samples, 0.71%)</title><rect x="43.2624%" y="117" width="0.7092%" height="15" fill="rgb(222,207,29)" fg:x="61" fg:w="1"/><text x="43.5124%" y="127.50"></text></g><g><title>lab4::idea::IdeaGenerator::run (2 samples, 1.42%)</title><rect x="43.2624%" y="581" width="1.4184%" height="15" fill="rgb(206,96,30)" fg:x="61" fg:w="2"/><text x="43.5124%" y="591.50"></text></g><g><title>lab4::idea::IdeaGenerator::get_next_idea_name (2 samples, 1.42%)</title><rect x="43.2624%" y="565" width="1.4184%" height="15" fill="rgb(218,138,4)" fg:x="61" fg:w="2"/><text x="43.5124%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String)&gt;&gt; (1 samples, 0.71%)</title><rect x="43.9716%" y="549" width="0.7092%" height="15" fill="rgb(250,191,14)" fg:x="62" fg:w="1"/><text x="44.2216%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::string::String,alloc::string::String)&gt;&gt; (1 samples, 0.71%)</title><rect x="43.9716%" y="533" width="0.7092%" height="15" fill="rgb(239,60,40)" fg:x="62" fg:w="1"/><text x="44.2216%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.71%)</title><rect x="43.9716%" y="517" width="0.7092%" height="15" fill="rgb(206,27,48)" fg:x="62" fg:w="1"/><text x="44.2216%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.71%)</title><rect x="43.9716%" y="501" width="0.7092%" height="15" fill="rgb(225,35,8)" fg:x="62" fg:w="1"/><text x="44.2216%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.71%)</title><rect x="43.9716%" y="485" width="0.7092%" height="15" fill="rgb(250,213,24)" fg:x="62" fg:w="1"/><text x="44.2216%" y="495.50"></text></g><g><title>_int_free (1 samples, 0.71%)</title><rect x="43.9716%" y="469" width="0.7092%" height="15" fill="rgb(247,123,22)" fg:x="62" fg:w="1"/><text x="44.2216%" y="479.50"></text></g><g><title>malloc_consolidate (1 samples, 0.71%)</title><rect x="43.9716%" y="453" width="0.7092%" height="15" fill="rgb(231,138,38)" fg:x="62" fg:w="1"/><text x="44.2216%" y="463.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (6 samples, 4.26%)</title><rect x="44.6809%" y="565" width="4.2553%" height="15" fill="rgb(231,145,46)" fg:x="63" fg:w="6"/><text x="44.9309%" y="575.50">&lt;allo..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (6 samples, 4.26%)</title><rect x="44.6809%" y="549" width="4.2553%" height="15" fill="rgb(251,118,11)" fg:x="63" fg:w="6"/><text x="44.9309%" y="559.50">&lt;T as..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 4.26%)</title><rect x="44.6809%" y="533" width="4.2553%" height="15" fill="rgb(217,147,25)" fg:x="63" fg:w="6"/><text x="44.9309%" y="543.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 4.26%)</title><rect x="44.6809%" y="517" width="4.2553%" height="15" fill="rgb(247,81,37)" fg:x="63" fg:w="6"/><text x="44.9309%" y="527.50">&lt;allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 4.26%)</title><rect x="44.6809%" y="501" width="4.2553%" height="15" fill="rgb(209,12,38)" fg:x="63" fg:w="6"/><text x="44.9309%" y="511.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (6 samples, 4.26%)</title><rect x="44.6809%" y="485" width="4.2553%" height="15" fill="rgb(227,1,9)" fg:x="63" fg:w="6"/><text x="44.9309%" y="495.50">alloc..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 4.26%)</title><rect x="44.6809%" y="469" width="4.2553%" height="15" fill="rgb(248,47,43)" fg:x="63" fg:w="6"/><text x="44.9309%" y="479.50">&lt;T as..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 4.26%)</title><rect x="44.6809%" y="453" width="4.2553%" height="15" fill="rgb(221,10,30)" fg:x="63" fg:w="6"/><text x="44.9309%" y="463.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 4.26%)</title><rect x="44.6809%" y="437" width="4.2553%" height="15" fill="rgb(210,229,1)" fg:x="63" fg:w="6"/><text x="44.9309%" y="447.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 4.26%)</title><rect x="44.6809%" y="421" width="4.2553%" height="15" fill="rgb(222,148,37)" fg:x="63" fg:w="6"/><text x="44.9309%" y="431.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 4.26%)</title><rect x="44.6809%" y="405" width="4.2553%" height="15" fill="rgb(234,67,33)" fg:x="63" fg:w="6"/><text x="44.9309%" y="415.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 4.26%)</title><rect x="44.6809%" y="389" width="4.2553%" height="15" fill="rgb(247,98,35)" fg:x="63" fg:w="6"/><text x="44.9309%" y="399.50">alloc..</text></g><g><title>alloc::alloc::alloc (6 samples, 4.26%)</title><rect x="44.6809%" y="373" width="4.2553%" height="15" fill="rgb(247,138,52)" fg:x="63" fg:w="6"/><text x="44.9309%" y="383.50">alloc..</text></g><g><title>__GI___libc_malloc (6 samples, 4.26%)</title><rect x="44.6809%" y="357" width="4.2553%" height="15" fill="rgb(213,79,30)" fg:x="63" fg:w="6"/><text x="44.9309%" y="367.50">__GI_..</text></g><g><title>_int_malloc (5 samples, 3.55%)</title><rect x="45.3901%" y="341" width="3.5461%" height="15" fill="rgb(246,177,23)" fg:x="64" fg:w="5"/><text x="45.6401%" y="351.50">_int..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="45.3901%" y="325" width="3.5461%" height="15" fill="rgb(230,62,27)" fg:x="64" fg:w="5"/><text x="45.6401%" y="335.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="45.3901%" y="309" width="3.5461%" height="15" fill="rgb(216,154,8)" fg:x="64" fg:w="5"/><text x="45.6401%" y="319.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="45.3901%" y="293" width="3.5461%" height="15" fill="rgb(244,35,45)" fg:x="64" fg:w="5"/><text x="45.6401%" y="303.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="45.3901%" y="277" width="3.5461%" height="15" fill="rgb(251,115,12)" fg:x="64" fg:w="5"/><text x="45.6401%" y="287.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="45.3901%" y="261" width="3.5461%" height="15" fill="rgb(240,54,50)" fg:x="64" fg:w="5"/><text x="45.6401%" y="271.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="45.3901%" y="245" width="3.5461%" height="15" fill="rgb(233,84,52)" fg:x="64" fg:w="5"/><text x="45.6401%" y="255.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="45.3901%" y="229" width="3.5461%" height="15" fill="rgb(207,117,47)" fg:x="64" fg:w="5"/><text x="45.6401%" y="239.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="45.3901%" y="213" width="3.5461%" height="15" fill="rgb(249,43,39)" fg:x="64" fg:w="5"/><text x="45.6401%" y="223.50">[unk..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;lab4::checksum::Checksum&gt;&gt; (2 samples, 1.42%)</title><rect x="48.9362%" y="565" width="1.4184%" height="15" fill="rgb(209,38,44)" fg:x="69" fg:w="2"/><text x="49.1862%" y="575.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.42%)</title><rect x="48.9362%" y="549" width="1.4184%" height="15" fill="rgb(236,212,23)" fg:x="69" fg:w="2"/><text x="49.1862%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (2 samples, 1.42%)</title><rect x="48.9362%" y="533" width="1.4184%" height="15" fill="rgb(242,79,21)" fg:x="69" fg:w="2"/><text x="49.1862%" y="543.50"></text></g><g><title>syscall (2 samples, 1.42%)</title><rect x="48.9362%" y="517" width="1.4184%" height="15" fill="rgb(211,96,35)" fg:x="69" fg:w="2"/><text x="49.1862%" y="527.50"></text></g><g><title>[unknown] (2 samples, 1.42%)</title><rect x="48.9362%" y="501" width="1.4184%" height="15" fill="rgb(253,215,40)" fg:x="69" fg:w="2"/><text x="49.1862%" y="511.50"></text></g><g><title>[unknown] (2 samples, 1.42%)</title><rect x="48.9362%" y="485" width="1.4184%" height="15" fill="rgb(211,81,21)" fg:x="69" fg:w="2"/><text x="49.1862%" y="495.50"></text></g><g><title>[unknown] (2 samples, 1.42%)</title><rect x="48.9362%" y="469" width="1.4184%" height="15" fill="rgb(208,190,38)" fg:x="69" fg:w="2"/><text x="49.1862%" y="479.50"></text></g><g><title>[unknown] (2 samples, 1.42%)</title><rect x="48.9362%" y="453" width="1.4184%" height="15" fill="rgb(235,213,38)" fg:x="69" fg:w="2"/><text x="49.1862%" y="463.50"></text></g><g><title>[unknown] (2 samples, 1.42%)</title><rect x="48.9362%" y="437" width="1.4184%" height="15" fill="rgb(237,122,38)" fg:x="69" fg:w="2"/><text x="49.1862%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="49.6454%" y="421" width="0.7092%" height="15" fill="rgb(244,218,35)" fg:x="70" fg:w="1"/><text x="49.8954%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="49.6454%" y="405" width="0.7092%" height="15" fill="rgb(240,68,47)" fg:x="70" fg:w="1"/><text x="49.8954%" y="415.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (1 samples, 0.71%)</title><rect x="50.3546%" y="565" width="0.7092%" height="15" fill="rgb(210,16,53)" fg:x="71" fg:w="1"/><text x="50.6046%" y="575.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (1 samples, 0.71%)</title><rect x="50.3546%" y="549" width="0.7092%" height="15" fill="rgb(235,124,12)" fg:x="71" fg:w="1"/><text x="50.6046%" y="559.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (1 samples, 0.71%)</title><rect x="50.3546%" y="533" width="0.7092%" height="15" fill="rgb(224,169,11)" fg:x="71" fg:w="1"/><text x="50.6046%" y="543.50"></text></g><g><title>lab4::package::PackageDownloader::run (21 samples, 14.89%)</title><rect x="44.6809%" y="581" width="14.8936%" height="15" fill="rgb(250,166,2)" fg:x="63" fg:w="21"/><text x="44.9309%" y="591.50">lab4::package::PackageD..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 8.51%)</title><rect x="51.0638%" y="565" width="8.5106%" height="15" fill="rgb(242,216,29)" fg:x="72" fg:w="12"/><text x="51.3138%" y="575.50">std::sync::m..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (12 samples, 8.51%)</title><rect x="51.0638%" y="549" width="8.5106%" height="15" fill="rgb(230,116,27)" fg:x="72" fg:w="12"/><text x="51.3138%" y="559.50">std::sys::un..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (12 samples, 8.51%)</title><rect x="51.0638%" y="533" width="8.5106%" height="15" fill="rgb(228,99,48)" fg:x="72" fg:w="12"/><text x="51.3138%" y="543.50">std::sys::un..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (12 samples, 8.51%)</title><rect x="51.0638%" y="517" width="8.5106%" height="15" fill="rgb(253,11,6)" fg:x="72" fg:w="12"/><text x="51.3138%" y="527.50">std::sys::un..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.71%)</title><rect x="59.5745%" y="565" width="0.7092%" height="15" fill="rgb(247,143,39)" fg:x="84" fg:w="1"/><text x="59.8245%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.71%)</title><rect x="59.5745%" y="549" width="0.7092%" height="15" fill="rgb(236,97,10)" fg:x="84" fg:w="1"/><text x="59.8245%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.71%)</title><rect x="59.5745%" y="533" width="0.7092%" height="15" fill="rgb(233,208,19)" fg:x="84" fg:w="1"/><text x="59.8245%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.71%)</title><rect x="59.5745%" y="517" width="0.7092%" height="15" fill="rgb(216,164,2)" fg:x="84" fg:w="1"/><text x="59.8245%" y="527.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.71%)</title><rect x="59.5745%" y="501" width="0.7092%" height="15" fill="rgb(220,129,5)" fg:x="84" fg:w="1"/><text x="59.8245%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (5 samples, 3.55%)</title><rect x="60.2837%" y="405" width="3.5461%" height="15" fill="rgb(242,17,10)" fg:x="85" fg:w="5"/><text x="60.5337%" y="415.50">core..</text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 3.55%)</title><rect x="60.2837%" y="389" width="3.5461%" height="15" fill="rgb(242,107,0)" fg:x="85" fg:w="5"/><text x="60.5337%" y="399.50">core..</text></g><g><title>core::bool::&lt;impl bool&gt;::then (10 samples, 7.09%)</title><rect x="63.8298%" y="389" width="7.0922%" height="15" fill="rgb(251,28,31)" fg:x="90" fg:w="10"/><text x="64.0798%" y="399.50">core::bool..</text></g><g><title>crossbeam_channel::context::Context::with (20 samples, 14.18%)</title><rect x="60.2837%" y="533" width="14.1844%" height="15" fill="rgb(233,223,10)" fg:x="85" fg:w="20"/><text x="60.5337%" y="543.50">crossbeam_channel::con..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 14.18%)</title><rect x="60.2837%" y="517" width="14.1844%" height="15" fill="rgb(215,21,27)" fg:x="85" fg:w="20"/><text x="60.5337%" y="527.50">std::thread::local::Lo..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (20 samples, 14.18%)</title><rect x="60.2837%" y="501" width="14.1844%" height="15" fill="rgb(232,23,21)" fg:x="85" fg:w="20"/><text x="60.5337%" y="511.50">crossbeam_channel::con..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (20 samples, 14.18%)</title><rect x="60.2837%" y="485" width="14.1844%" height="15" fill="rgb(244,5,23)" fg:x="85" fg:w="20"/><text x="60.5337%" y="495.50">crossbeam_channel::con..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (20 samples, 14.18%)</title><rect x="60.2837%" y="469" width="14.1844%" height="15" fill="rgb(226,81,46)" fg:x="85" fg:w="20"/><text x="60.5337%" y="479.50">crossbeam_channel::fla..</text></g><g><title>crossbeam_channel::context::Context::wait_until (20 samples, 14.18%)</title><rect x="60.2837%" y="453" width="14.1844%" height="15" fill="rgb(247,70,30)" fg:x="85" fg:w="20"/><text x="60.5337%" y="463.50">crossbeam_channel::con..</text></g><g><title>std::thread::park (20 samples, 14.18%)</title><rect x="60.2837%" y="437" width="14.1844%" height="15" fill="rgb(212,68,19)" fg:x="85" fg:w="20"/><text x="60.5337%" y="447.50">std::thread::park</text></g><g><title>std::sys_common::thread_parking::futex::Parker::park (20 samples, 14.18%)</title><rect x="60.2837%" y="421" width="14.1844%" height="15" fill="rgb(240,187,13)" fg:x="85" fg:w="20"/><text x="60.5337%" y="431.50">std::sys_common::threa..</text></g><g><title>std::sys::unix::futex::futex_wait (15 samples, 10.64%)</title><rect x="63.8298%" y="405" width="10.6383%" height="15" fill="rgb(223,113,26)" fg:x="90" fg:w="15"/><text x="64.0798%" y="415.50">std::sys::unix::..</text></g><g><title>syscall (5 samples, 3.55%)</title><rect x="70.9220%" y="389" width="3.5461%" height="15" fill="rgb(206,192,2)" fg:x="100" fg:w="5"/><text x="71.1720%" y="399.50">sysc..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="70.9220%" y="373" width="3.5461%" height="15" fill="rgb(241,108,4)" fg:x="100" fg:w="5"/><text x="71.1720%" y="383.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="70.9220%" y="357" width="3.5461%" height="15" fill="rgb(247,173,49)" fg:x="100" fg:w="5"/><text x="71.1720%" y="367.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="70.9220%" y="341" width="3.5461%" height="15" fill="rgb(224,114,35)" fg:x="100" fg:w="5"/><text x="71.1720%" y="351.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="70.9220%" y="325" width="3.5461%" height="15" fill="rgb(245,159,27)" fg:x="100" fg:w="5"/><text x="71.1720%" y="335.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="70.9220%" y="309" width="3.5461%" height="15" fill="rgb(245,172,44)" fg:x="100" fg:w="5"/><text x="71.1720%" y="319.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="70.9220%" y="293" width="3.5461%" height="15" fill="rgb(236,23,11)" fg:x="100" fg:w="5"/><text x="71.1720%" y="303.50">[unk..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (2 samples, 1.42%)</title><rect x="74.4681%" y="533" width="1.4184%" height="15" fill="rgb(205,117,38)" fg:x="105" fg:w="2"/><text x="74.7181%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.71%)</title><rect x="75.1773%" y="517" width="0.7092%" height="15" fill="rgb(237,72,25)" fg:x="106" fg:w="1"/><text x="75.4273%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.71%)</title><rect x="75.1773%" y="501" width="0.7092%" height="15" fill="rgb(244,70,9)" fg:x="106" fg:w="1"/><text x="75.4273%" y="511.50"></text></g><g><title>__GI___sched_yield (1 samples, 0.71%)</title><rect x="76.5957%" y="517" width="0.7092%" height="15" fill="rgb(217,125,39)" fg:x="108" fg:w="1"/><text x="76.8457%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="76.5957%" y="501" width="0.7092%" height="15" fill="rgb(235,36,10)" fg:x="108" fg:w="1"/><text x="76.8457%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="76.5957%" y="485" width="0.7092%" height="15" fill="rgb(251,123,47)" fg:x="108" fg:w="1"/><text x="76.8457%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="76.5957%" y="469" width="0.7092%" height="15" fill="rgb(221,13,13)" fg:x="108" fg:w="1"/><text x="76.8457%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="76.5957%" y="453" width="0.7092%" height="15" fill="rgb(238,131,9)" fg:x="108" fg:w="1"/><text x="76.8457%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="76.5957%" y="437" width="0.7092%" height="15" fill="rgb(211,50,8)" fg:x="108" fg:w="1"/><text x="76.8457%" y="447.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (29 samples, 20.57%)</title><rect x="60.2837%" y="565" width="20.5674%" height="15" fill="rgb(245,182,24)" fg:x="85" fg:w="29"/><text x="60.5337%" y="575.50">crossbeam_channel::channel::Rece..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (29 samples, 20.57%)</title><rect x="60.2837%" y="549" width="20.5674%" height="15" fill="rgb(242,14,37)" fg:x="85" fg:w="29"/><text x="60.5337%" y="559.50">crossbeam_channel::flavors::list..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (7 samples, 4.96%)</title><rect x="75.8865%" y="533" width="4.9645%" height="15" fill="rgb(246,228,12)" fg:x="107" fg:w="7"/><text x="76.1365%" y="543.50">crossb..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 3.55%)</title><rect x="77.3050%" y="517" width="3.5461%" height="15" fill="rgb(213,55,15)" fg:x="109" fg:w="5"/><text x="77.5550%" y="527.50">core..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 3.55%)</title><rect x="77.3050%" y="501" width="3.5461%" height="15" fill="rgb(209,9,3)" fg:x="109" fg:w="5"/><text x="77.5550%" y="511.50">&lt;cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (5 samples, 3.55%)</title><rect x="77.3050%" y="485" width="3.5461%" height="15" fill="rgb(230,59,30)" fg:x="109" fg:w="5"/><text x="77.5550%" y="495.50">core..</text></g><g><title>crossbeam_channel::utils::Spinlock&lt;T&gt;::lock (1 samples, 0.71%)</title><rect x="80.8511%" y="501" width="0.7092%" height="15" fill="rgb(209,121,21)" fg:x="114" fg:w="1"/><text x="81.1011%" y="511.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (1 samples, 0.71%)</title><rect x="80.8511%" y="485" width="0.7092%" height="15" fill="rgb(220,109,13)" fg:x="114" fg:w="1"/><text x="81.1011%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.71%)</title><rect x="80.8511%" y="469" width="0.7092%" height="15" fill="rgb(232,18,1)" fg:x="114" fg:w="1"/><text x="81.1011%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.71%)</title><rect x="80.8511%" y="453" width="0.7092%" height="15" fill="rgb(215,41,42)" fg:x="114" fg:w="1"/><text x="81.1011%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.71%)</title><rect x="80.8511%" y="437" width="0.7092%" height="15" fill="rgb(224,123,36)" fg:x="114" fg:w="1"/><text x="81.1011%" y="447.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (6 samples, 4.26%)</title><rect x="80.8511%" y="565" width="4.2553%" height="15" fill="rgb(240,125,3)" fg:x="114" fg:w="6"/><text x="81.1011%" y="575.50">cross..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (6 samples, 4.26%)</title><rect x="80.8511%" y="549" width="4.2553%" height="15" fill="rgb(205,98,50)" fg:x="114" fg:w="6"/><text x="81.1011%" y="559.50">cross..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (6 samples, 4.26%)</title><rect x="80.8511%" y="533" width="4.2553%" height="15" fill="rgb(205,185,37)" fg:x="114" fg:w="6"/><text x="81.1011%" y="543.50">cross..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (6 samples, 4.26%)</title><rect x="80.8511%" y="517" width="4.2553%" height="15" fill="rgb(238,207,15)" fg:x="114" fg:w="6"/><text x="81.1011%" y="527.50">cross..</text></g><g><title>crossbeam_channel::waker::Waker::try_select (5 samples, 3.55%)</title><rect x="81.5603%" y="501" width="3.5461%" height="15" fill="rgb(213,199,42)" fg:x="115" fg:w="5"/><text x="81.8103%" y="511.50">cros..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (5 samples, 3.55%)</title><rect x="81.5603%" y="485" width="3.5461%" height="15" fill="rgb(235,201,11)" fg:x="115" fg:w="5"/><text x="81.8103%" y="495.50">allo..</text></g><g><title>std::panic::catch_unwind (60 samples, 42.55%)</title><rect x="43.2624%" y="693" width="42.5532%" height="15" fill="rgb(207,46,11)" fg:x="61" fg:w="60"/><text x="43.5124%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (60 samples, 42.55%)</title><rect x="43.2624%" y="677" width="42.5532%" height="15" fill="rgb(241,35,35)" fg:x="61" fg:w="60"/><text x="43.5124%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (60 samples, 42.55%)</title><rect x="43.2624%" y="661" width="42.5532%" height="15" fill="rgb(243,32,47)" fg:x="61" fg:w="60"/><text x="43.5124%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (60 samples, 42.55%)</title><rect x="43.2624%" y="645" width="42.5532%" height="15" fill="rgb(247,202,23)" fg:x="61" fg:w="60"/><text x="43.5124%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (60 samples, 42.55%)</title><rect x="43.2624%" y="629" width="42.5532%" height="15" fill="rgb(219,102,11)" fg:x="61" fg:w="60"/><text x="43.5124%" y="639.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (60 samples, 42.55%)</title><rect x="43.2624%" y="613" width="42.5532%" height="15" fill="rgb(243,110,44)" fg:x="61" fg:w="60"/><text x="43.5124%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::hackathon::{{closure}} (60 samples, 42.55%)</title><rect x="43.2624%" y="597" width="42.5532%" height="15" fill="rgb(222,74,54)" fg:x="61" fg:w="60"/><text x="43.5124%" y="607.50">lab4::hackathon::{{closure}}</text></g><g><title>lab4::student::Student::run (37 samples, 26.24%)</title><rect x="59.5745%" y="581" width="26.2411%" height="15" fill="rgb(216,99,12)" fg:x="84" fg:w="37"/><text x="59.8245%" y="591.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (1 samples, 0.71%)</title><rect x="85.1064%" y="565" width="0.7092%" height="15" fill="rgb(226,22,26)" fg:x="120" fg:w="1"/><text x="85.3564%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;lab4::package::Package&gt;&gt; (1 samples, 0.71%)</title><rect x="85.1064%" y="549" width="0.7092%" height="15" fill="rgb(217,163,10)" fg:x="120" fg:w="1"/><text x="85.3564%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.71%)</title><rect x="85.1064%" y="533" width="0.7092%" height="15" fill="rgb(213,25,53)" fg:x="120" fg:w="1"/><text x="85.3564%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lab4::package::Package]&gt; (1 samples, 0.71%)</title><rect x="85.1064%" y="517" width="0.7092%" height="15" fill="rgb(252,105,26)" fg:x="120" fg:w="1"/><text x="85.3564%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;lab4::package::Package&gt; (1 samples, 0.71%)</title><rect x="85.1064%" y="501" width="0.7092%" height="15" fill="rgb(220,39,43)" fg:x="120" fg:w="1"/><text x="85.3564%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.71%)</title><rect x="85.1064%" y="485" width="0.7092%" height="15" fill="rgb(229,68,48)" fg:x="120" fg:w="1"/><text x="85.3564%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.71%)</title><rect x="85.1064%" y="469" width="0.7092%" height="15" fill="rgb(252,8,32)" fg:x="120" fg:w="1"/><text x="85.3564%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.71%)</title><rect x="85.1064%" y="453" width="0.7092%" height="15" fill="rgb(223,20,43)" fg:x="120" fg:w="1"/><text x="85.3564%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.71%)</title><rect x="85.1064%" y="437" width="0.7092%" height="15" fill="rgb(229,81,49)" fg:x="120" fg:w="1"/><text x="85.3564%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.71%)</title><rect x="85.1064%" y="421" width="0.7092%" height="15" fill="rgb(236,28,36)" fg:x="120" fg:w="1"/><text x="85.3564%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.71%)</title><rect x="85.1064%" y="405" width="0.7092%" height="15" fill="rgb(249,185,26)" fg:x="120" fg:w="1"/><text x="85.3564%" y="415.50"></text></g><g><title>_int_free (1 samples, 0.71%)</title><rect x="85.1064%" y="389" width="0.7092%" height="15" fill="rgb(249,174,33)" fg:x="120" fg:w="1"/><text x="85.3564%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 43.26%)</title><rect x="43.2624%" y="757" width="43.2624%" height="15" fill="rgb(233,201,37)" fg:x="61" fg:w="61"/><text x="43.5124%" y="767.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 43.26%)</title><rect x="43.2624%" y="741" width="43.2624%" height="15" fill="rgb(221,78,26)" fg:x="61" fg:w="61"/><text x="43.5124%" y="751.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (61 samples, 43.26%)</title><rect x="43.2624%" y="725" width="43.2624%" height="15" fill="rgb(250,127,30)" fg:x="61" fg:w="61"/><text x="43.5124%" y="735.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (61 samples, 43.26%)</title><rect x="43.2624%" y="709" width="43.2624%" height="15" fill="rgb(230,49,44)" fg:x="61" fg:w="61"/><text x="43.5124%" y="719.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.71%)</title><rect x="85.8156%" y="693" width="0.7092%" height="15" fill="rgb(229,67,23)" fg:x="121" fg:w="1"/><text x="86.0656%" y="703.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.71%)</title><rect x="85.8156%" y="677" width="0.7092%" height="15" fill="rgb(249,83,47)" fg:x="121" fg:w="1"/><text x="86.0656%" y="687.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.71%)</title><rect x="85.8156%" y="661" width="0.7092%" height="15" fill="rgb(215,43,3)" fg:x="121" fg:w="1"/><text x="86.0656%" y="671.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.71%)</title><rect x="85.8156%" y="645" width="0.7092%" height="15" fill="rgb(238,154,13)" fg:x="121" fg:w="1"/><text x="86.0656%" y="655.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.71%)</title><rect x="85.8156%" y="629" width="0.7092%" height="15" fill="rgb(219,56,2)" fg:x="121" fg:w="1"/><text x="86.0656%" y="639.50"></text></g><g><title>new_heap (1 samples, 0.71%)</title><rect x="85.8156%" y="613" width="0.7092%" height="15" fill="rgb(233,0,4)" fg:x="121" fg:w="1"/><text x="86.0656%" y="623.50"></text></g><g><title>__GI_munmap (1 samples, 0.71%)</title><rect x="85.8156%" y="597" width="0.7092%" height="15" fill="rgb(235,30,7)" fg:x="121" fg:w="1"/><text x="86.0656%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="581" width="0.7092%" height="15" fill="rgb(250,79,13)" fg:x="121" fg:w="1"/><text x="86.0656%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="565" width="0.7092%" height="15" fill="rgb(211,146,34)" fg:x="121" fg:w="1"/><text x="86.0656%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="549" width="0.7092%" height="15" fill="rgb(228,22,38)" fg:x="121" fg:w="1"/><text x="86.0656%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="533" width="0.7092%" height="15" fill="rgb(235,168,5)" fg:x="121" fg:w="1"/><text x="86.0656%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="517" width="0.7092%" height="15" fill="rgb(221,155,16)" fg:x="121" fg:w="1"/><text x="86.0656%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="501" width="0.7092%" height="15" fill="rgb(215,215,53)" fg:x="121" fg:w="1"/><text x="86.0656%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="485" width="0.7092%" height="15" fill="rgb(223,4,10)" fg:x="121" fg:w="1"/><text x="86.0656%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="469" width="0.7092%" height="15" fill="rgb(234,103,6)" fg:x="121" fg:w="1"/><text x="86.0656%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="453" width="0.7092%" height="15" fill="rgb(227,97,0)" fg:x="121" fg:w="1"/><text x="86.0656%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="437" width="0.7092%" height="15" fill="rgb(234,150,53)" fg:x="121" fg:w="1"/><text x="86.0656%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="421" width="0.7092%" height="15" fill="rgb(228,201,54)" fg:x="121" fg:w="1"/><text x="86.0656%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="405" width="0.7092%" height="15" fill="rgb(222,22,37)" fg:x="121" fg:w="1"/><text x="86.0656%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="389" width="0.7092%" height="15" fill="rgb(237,53,32)" fg:x="121" fg:w="1"/><text x="86.0656%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="85.8156%" y="373" width="0.7092%" height="15" fill="rgb(233,25,53)" fg:x="121" fg:w="1"/><text x="86.0656%" y="383.50"></text></g><g><title>__GI___clone (127 samples, 90.07%)</title><rect x="0.7092%" y="805" width="90.0709%" height="15" fill="rgb(210,40,34)" fg:x="1" fg:w="127"/><text x="0.9592%" y="815.50">__GI___clone</text></g><g><title>start_thread (89 samples, 63.12%)</title><rect x="27.6596%" y="789" width="63.1206%" height="15" fill="rgb(241,220,44)" fg:x="39" fg:w="89"/><text x="27.9096%" y="799.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (67 samples, 47.52%)</title><rect x="43.2624%" y="773" width="47.5177%" height="15" fill="rgb(235,28,35)" fg:x="61" fg:w="67"/><text x="43.5124%" y="783.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (6 samples, 4.26%)</title><rect x="86.5248%" y="757" width="4.2553%" height="15" fill="rgb(210,56,17)" fg:x="122" fg:w="6"/><text x="86.7748%" y="767.50">std::..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (6 samples, 4.26%)</title><rect x="86.5248%" y="741" width="4.2553%" height="15" fill="rgb(224,130,29)" fg:x="122" fg:w="6"/><text x="86.7748%" y="751.50">std::..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (6 samples, 4.26%)</title><rect x="86.5248%" y="725" width="4.2553%" height="15" fill="rgb(235,212,8)" fg:x="122" fg:w="6"/><text x="86.7748%" y="735.50">std::..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (6 samples, 4.26%)</title><rect x="86.5248%" y="709" width="4.2553%" height="15" fill="rgb(223,33,50)" fg:x="122" fg:w="6"/><text x="86.7748%" y="719.50">std::..</text></g><g><title>__GI___mmap64 (5 samples, 3.55%)</title><rect x="87.2340%" y="693" width="3.5461%" height="15" fill="rgb(219,149,13)" fg:x="123" fg:w="5"/><text x="87.4840%" y="703.50">__GI..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="87.2340%" y="677" width="3.5461%" height="15" fill="rgb(250,156,29)" fg:x="123" fg:w="5"/><text x="87.4840%" y="687.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="87.2340%" y="661" width="3.5461%" height="15" fill="rgb(216,193,19)" fg:x="123" fg:w="5"/><text x="87.4840%" y="671.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="87.2340%" y="645" width="3.5461%" height="15" fill="rgb(216,135,14)" fg:x="123" fg:w="5"/><text x="87.4840%" y="655.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="87.2340%" y="629" width="3.5461%" height="15" fill="rgb(241,47,5)" fg:x="123" fg:w="5"/><text x="87.4840%" y="639.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="87.2340%" y="613" width="3.5461%" height="15" fill="rgb(233,42,35)" fg:x="123" fg:w="5"/><text x="87.4840%" y="623.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="87.2340%" y="597" width="3.5461%" height="15" fill="rgb(231,13,6)" fg:x="123" fg:w="5"/><text x="87.4840%" y="607.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="87.2340%" y="581" width="3.5461%" height="15" fill="rgb(207,181,40)" fg:x="123" fg:w="5"/><text x="87.4840%" y="591.50">[unk..</text></g><g><title>[unknown] (4 samples, 2.84%)</title><rect x="87.9433%" y="565" width="2.8369%" height="15" fill="rgb(254,173,49)" fg:x="124" fg:w="4"/><text x="88.1933%" y="575.50">[u..</text></g><g><title>[unknown] (2 samples, 1.42%)</title><rect x="89.3617%" y="549" width="1.4184%" height="15" fill="rgb(221,1,38)" fg:x="126" fg:w="2"/><text x="89.6117%" y="559.50"></text></g><g><title>__libc_start_main (7 samples, 4.96%)</title><rect x="90.7801%" y="789" width="4.9645%" height="15" fill="rgb(206,124,46)" fg:x="128" fg:w="7"/><text x="91.0301%" y="799.50">__libc..</text></g><g><title>main (7 samples, 4.96%)</title><rect x="90.7801%" y="773" width="4.9645%" height="15" fill="rgb(249,21,11)" fg:x="128" fg:w="7"/><text x="91.0301%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (7 samples, 4.96%)</title><rect x="90.7801%" y="757" width="4.9645%" height="15" fill="rgb(222,201,40)" fg:x="128" fg:w="7"/><text x="91.0301%" y="767.50">std::r..</text></g><g><title>std::panic::catch_unwind (7 samples, 4.96%)</title><rect x="90.7801%" y="741" width="4.9645%" height="15" fill="rgb(235,61,29)" fg:x="128" fg:w="7"/><text x="91.0301%" y="751.50">std::p..</text></g><g><title>std::panicking::try (7 samples, 4.96%)</title><rect x="90.7801%" y="725" width="4.9645%" height="15" fill="rgb(219,207,3)" fg:x="128" fg:w="7"/><text x="91.0301%" y="735.50">std::p..</text></g><g><title>std::panicking::try::do_call (7 samples, 4.96%)</title><rect x="90.7801%" y="709" width="4.9645%" height="15" fill="rgb(222,56,46)" fg:x="128" fg:w="7"/><text x="91.0301%" y="719.50">std::p..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (7 samples, 4.96%)</title><rect x="90.7801%" y="693" width="4.9645%" height="15" fill="rgb(239,76,54)" fg:x="128" fg:w="7"/><text x="91.0301%" y="703.50">std::r..</text></g><g><title>std::panic::catch_unwind (7 samples, 4.96%)</title><rect x="90.7801%" y="677" width="4.9645%" height="15" fill="rgb(231,124,27)" fg:x="128" fg:w="7"/><text x="91.0301%" y="687.50">std::p..</text></g><g><title>std::panicking::try (7 samples, 4.96%)</title><rect x="90.7801%" y="661" width="4.9645%" height="15" fill="rgb(249,195,6)" fg:x="128" fg:w="7"/><text x="91.0301%" y="671.50">std::p..</text></g><g><title>std::panicking::try::do_call (7 samples, 4.96%)</title><rect x="90.7801%" y="645" width="4.9645%" height="15" fill="rgb(237,174,47)" fg:x="128" fg:w="7"/><text x="91.0301%" y="655.50">std::p..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7 samples, 4.96%)</title><rect x="90.7801%" y="629" width="4.9645%" height="15" fill="rgb(206,201,31)" fg:x="128" fg:w="7"/><text x="91.0301%" y="639.50">core::..</text></g><g><title>std::rt::lang_start::{{closure}} (7 samples, 4.96%)</title><rect x="90.7801%" y="613" width="4.9645%" height="15" fill="rgb(231,57,52)" fg:x="128" fg:w="7"/><text x="91.0301%" y="623.50">std::r..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 4.96%)</title><rect x="90.7801%" y="597" width="4.9645%" height="15" fill="rgb(248,177,22)" fg:x="128" fg:w="7"/><text x="91.0301%" y="607.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 4.96%)</title><rect x="90.7801%" y="581" width="4.9645%" height="15" fill="rgb(215,211,37)" fg:x="128" fg:w="7"/><text x="91.0301%" y="591.50">core::..</text></g><g><title>lab4::main (7 samples, 4.96%)</title><rect x="90.7801%" y="565" width="4.9645%" height="15" fill="rgb(241,128,51)" fg:x="128" fg:w="7"/><text x="91.0301%" y="575.50">lab4::..</text></g><g><title>lab4::hackathon (7 samples, 4.96%)</title><rect x="90.7801%" y="549" width="4.9645%" height="15" fill="rgb(227,165,31)" fg:x="128" fg:w="7"/><text x="91.0301%" y="559.50">lab4::..</text></g><g><title>std::io::stdio::_print (7 samples, 4.96%)</title><rect x="90.7801%" y="533" width="4.9645%" height="15" fill="rgb(228,167,24)" fg:x="128" fg:w="7"/><text x="91.0301%" y="543.50">std::i..</text></g><g><title>std::io::stdio::print_to (7 samples, 4.96%)</title><rect x="90.7801%" y="517" width="4.9645%" height="15" fill="rgb(228,143,12)" fg:x="128" fg:w="7"/><text x="91.0301%" y="527.50">std::i..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 4.96%)</title><rect x="90.7801%" y="501" width="4.9645%" height="15" fill="rgb(249,149,8)" fg:x="128" fg:w="7"/><text x="91.0301%" y="511.50">&lt;std::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (7 samples, 4.96%)</title><rect x="90.7801%" y="485" width="4.9645%" height="15" fill="rgb(243,35,44)" fg:x="128" fg:w="7"/><text x="91.0301%" y="495.50">&lt;&amp;std:..</text></g><g><title>std::io::Write::write_fmt (7 samples, 4.96%)</title><rect x="90.7801%" y="469" width="4.9645%" height="15" fill="rgb(246,89,9)" fg:x="128" fg:w="7"/><text x="91.0301%" y="479.50">std::i..</text></g><g><title>core::fmt::write (7 samples, 4.96%)</title><rect x="90.7801%" y="453" width="4.9645%" height="15" fill="rgb(233,213,13)" fg:x="128" fg:w="7"/><text x="91.0301%" y="463.50">core::..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 4.96%)</title><rect x="90.7801%" y="437" width="4.9645%" height="15" fill="rgb(233,141,41)" fg:x="128" fg:w="7"/><text x="91.0301%" y="447.50">&lt;std::..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 4.96%)</title><rect x="90.7801%" y="421" width="4.9645%" height="15" fill="rgb(239,167,4)" fg:x="128" fg:w="7"/><text x="91.0301%" y="431.50">&lt;std::..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 4.96%)</title><rect x="90.7801%" y="405" width="4.9645%" height="15" fill="rgb(209,217,16)" fg:x="128" fg:w="7"/><text x="91.0301%" y="415.50">&lt;std::..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 4.96%)</title><rect x="90.7801%" y="389" width="4.9645%" height="15" fill="rgb(219,88,35)" fg:x="128" fg:w="7"/><text x="91.0301%" y="399.50">&lt;std::..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (7 samples, 4.96%)</title><rect x="90.7801%" y="373" width="4.9645%" height="15" fill="rgb(220,193,23)" fg:x="128" fg:w="7"/><text x="91.0301%" y="383.50">std::i..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (7 samples, 4.96%)</title><rect x="90.7801%" y="357" width="4.9645%" height="15" fill="rgb(230,90,52)" fg:x="128" fg:w="7"/><text x="91.0301%" y="367.50">&lt;std::..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (7 samples, 4.96%)</title><rect x="90.7801%" y="341" width="4.9645%" height="15" fill="rgb(252,106,19)" fg:x="128" fg:w="7"/><text x="91.0301%" y="351.50">&lt;std::..</text></g><g><title>std::sys::unix::fd::FileDesc::write (7 samples, 4.96%)</title><rect x="90.7801%" y="325" width="4.9645%" height="15" fill="rgb(206,74,20)" fg:x="128" fg:w="7"/><text x="91.0301%" y="335.50">std::s..</text></g><g><title>__libc_write (7 samples, 4.96%)</title><rect x="90.7801%" y="309" width="4.9645%" height="15" fill="rgb(230,138,44)" fg:x="128" fg:w="7"/><text x="91.0301%" y="319.50">__libc..</text></g><g><title>__libc_write (7 samples, 4.96%)</title><rect x="90.7801%" y="293" width="4.9645%" height="15" fill="rgb(235,182,43)" fg:x="128" fg:w="7"/><text x="91.0301%" y="303.50">__libc..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="277" width="4.9645%" height="15" fill="rgb(242,16,51)" fg:x="128" fg:w="7"/><text x="91.0301%" y="287.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="261" width="4.9645%" height="15" fill="rgb(248,9,4)" fg:x="128" fg:w="7"/><text x="91.0301%" y="271.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="245" width="4.9645%" height="15" fill="rgb(210,31,22)" fg:x="128" fg:w="7"/><text x="91.0301%" y="255.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="229" width="4.9645%" height="15" fill="rgb(239,54,39)" fg:x="128" fg:w="7"/><text x="91.0301%" y="239.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="213" width="4.9645%" height="15" fill="rgb(230,99,41)" fg:x="128" fg:w="7"/><text x="91.0301%" y="223.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="197" width="4.9645%" height="15" fill="rgb(253,106,12)" fg:x="128" fg:w="7"/><text x="91.0301%" y="207.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="181" width="4.9645%" height="15" fill="rgb(213,46,41)" fg:x="128" fg:w="7"/><text x="91.0301%" y="191.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="165" width="4.9645%" height="15" fill="rgb(215,133,35)" fg:x="128" fg:w="7"/><text x="91.0301%" y="175.50">[unkno..</text></g><g><title>[unknown] (7 samples, 4.96%)</title><rect x="90.7801%" y="149" width="4.9645%" height="15" fill="rgb(213,28,5)" fg:x="128" fg:w="7"/><text x="91.0301%" y="159.50">[unkno..</text></g><g><title>[unknown] (6 samples, 4.26%)</title><rect x="91.4894%" y="133" width="4.2553%" height="15" fill="rgb(215,77,49)" fg:x="129" fg:w="6"/><text x="91.7394%" y="143.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.26%)</title><rect x="91.4894%" y="117" width="4.2553%" height="15" fill="rgb(248,100,22)" fg:x="129" fg:w="6"/><text x="91.7394%" y="127.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.26%)</title><rect x="91.4894%" y="101" width="4.2553%" height="15" fill="rgb(208,67,9)" fg:x="129" fg:w="6"/><text x="91.7394%" y="111.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.26%)</title><rect x="91.4894%" y="85" width="4.2553%" height="15" fill="rgb(219,133,21)" fg:x="129" fg:w="6"/><text x="91.7394%" y="95.50">[unkn..</text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.0355%" y="69" width="0.7092%" height="15" fill="rgb(246,46,29)" fg:x="134" fg:w="1"/><text x="95.2855%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.0355%" y="53" width="0.7092%" height="15" fill="rgb(246,185,52)" fg:x="134" fg:w="1"/><text x="95.2855%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.0355%" y="37" width="0.7092%" height="15" fill="rgb(252,136,11)" fg:x="134" fg:w="1"/><text x="95.2855%" y="47.50"></text></g><g><title>lab4 (136 samples, 96.45%)</title><rect x="0.0000%" y="821" width="96.4539%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="136"/><text x="0.2500%" y="831.50">lab4</text></g><g><title>_start (8 samples, 5.67%)</title><rect x="90.7801%" y="805" width="5.6738%" height="15" fill="rgb(211,51,23)" fg:x="128" fg:w="8"/><text x="91.0301%" y="815.50">_start</text></g><g><title>_dl_start (1 samples, 0.71%)</title><rect x="95.7447%" y="789" width="0.7092%" height="15" fill="rgb(247,221,28)" fg:x="135" fg:w="1"/><text x="95.9947%" y="799.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.71%)</title><rect x="95.7447%" y="773" width="0.7092%" height="15" fill="rgb(251,222,45)" fg:x="135" fg:w="1"/><text x="95.9947%" y="783.50"></text></g><g><title>dl_main (1 samples, 0.71%)</title><rect x="95.7447%" y="757" width="0.7092%" height="15" fill="rgb(217,162,53)" fg:x="135" fg:w="1"/><text x="95.9947%" y="767.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.71%)</title><rect x="95.7447%" y="741" width="0.7092%" height="15" fill="rgb(229,93,14)" fg:x="135" fg:w="1"/><text x="95.9947%" y="751.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.71%)</title><rect x="95.7447%" y="725" width="0.7092%" height="15" fill="rgb(209,67,49)" fg:x="135" fg:w="1"/><text x="95.9947%" y="735.50"></text></g><g><title>openaux (1 samples, 0.71%)</title><rect x="95.7447%" y="709" width="0.7092%" height="15" fill="rgb(213,87,29)" fg:x="135" fg:w="1"/><text x="95.9947%" y="719.50"></text></g><g><title>_dl_map_object (1 samples, 0.71%)</title><rect x="95.7447%" y="693" width="0.7092%" height="15" fill="rgb(205,151,52)" fg:x="135" fg:w="1"/><text x="95.9947%" y="703.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.71%)</title><rect x="95.7447%" y="677" width="0.7092%" height="15" fill="rgb(253,215,39)" fg:x="135" fg:w="1"/><text x="95.9947%" y="687.50"></text></g><g><title>_dl_setup_hash (1 samples, 0.71%)</title><rect x="95.7447%" y="661" width="0.7092%" height="15" fill="rgb(221,220,41)" fg:x="135" fg:w="1"/><text x="95.9947%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.7447%" y="645" width="0.7092%" height="15" fill="rgb(218,133,21)" fg:x="135" fg:w="1"/><text x="95.9947%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.7447%" y="629" width="0.7092%" height="15" fill="rgb(221,193,43)" fg:x="135" fg:w="1"/><text x="95.9947%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.7447%" y="613" width="0.7092%" height="15" fill="rgb(240,128,52)" fg:x="135" fg:w="1"/><text x="95.9947%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.7447%" y="597" width="0.7092%" height="15" fill="rgb(253,114,12)" fg:x="135" fg:w="1"/><text x="95.9947%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.7447%" y="581" width="0.7092%" height="15" fill="rgb(215,223,47)" fg:x="135" fg:w="1"/><text x="95.9947%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.7447%" y="565" width="0.7092%" height="15" fill="rgb(248,225,23)" fg:x="135" fg:w="1"/><text x="95.9947%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.7447%" y="549" width="0.7092%" height="15" fill="rgb(250,108,0)" fg:x="135" fg:w="1"/><text x="95.9947%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="95.7447%" y="533" width="0.7092%" height="15" fill="rgb(228,208,7)" fg:x="135" fg:w="1"/><text x="95.9947%" y="543.50"></text></g><g><title>all (141 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="141"/><text x="0.2500%" y="847.50"></text></g><g><title>perf-exec (5 samples, 3.55%)</title><rect x="96.4539%" y="821" width="3.5461%" height="15" fill="rgb(207,125,25)" fg:x="136" fg:w="5"/><text x="96.7039%" y="831.50">perf..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="96.4539%" y="805" width="3.5461%" height="15" fill="rgb(210,195,18)" fg:x="136" fg:w="5"/><text x="96.7039%" y="815.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="96.4539%" y="789" width="3.5461%" height="15" fill="rgb(249,80,12)" fg:x="136" fg:w="5"/><text x="96.7039%" y="799.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="96.4539%" y="773" width="3.5461%" height="15" fill="rgb(221,65,9)" fg:x="136" fg:w="5"/><text x="96.7039%" y="783.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="96.4539%" y="757" width="3.5461%" height="15" fill="rgb(235,49,36)" fg:x="136" fg:w="5"/><text x="96.7039%" y="767.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="96.4539%" y="741" width="3.5461%" height="15" fill="rgb(225,32,20)" fg:x="136" fg:w="5"/><text x="96.7039%" y="751.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="96.4539%" y="725" width="3.5461%" height="15" fill="rgb(215,141,46)" fg:x="136" fg:w="5"/><text x="96.7039%" y="735.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="96.4539%" y="709" width="3.5461%" height="15" fill="rgb(250,160,47)" fg:x="136" fg:w="5"/><text x="96.7039%" y="719.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.55%)</title><rect x="96.4539%" y="693" width="3.5461%" height="15" fill="rgb(216,222,40)" fg:x="136" fg:w="5"/><text x="96.7039%" y="703.50">[unk..</text></g></svg></svg>